/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.org.ibm.api;

import com.org.ibm.model.HTTPError;
import com.org.ibm.model.InitiatePaymentInitiationTransactionRequest;
import com.org.ibm.model.InitiatePaymentInitiationTransactionResponse;
import com.org.ibm.model.RetrieveComplianceResponse;
import com.org.ibm.model.RetrieveFundingCheckResponse;
import com.org.ibm.model.RetrieveOrderInitiationResponse;
import com.org.ibm.model.RetrievePaymentInitiationTransactionResponse;
import com.org.ibm.model.UpdatePaymentInitiationTransactionRequest;
import com.org.ibm.model.UpdatePaymentInitiationTransactionResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Validated
@Api(value = "PaymentInitiation", description = "the PaymentInitiation API")
public interface PaymentInitiationApi {
    

    @ApiOperation(value = "InCR Initiate a payment transaction", nickname = "initiate", notes = "InCR Initiate a payment transaction", response = InitiatePaymentInitiationTransactionResponse.class, tags={ "CR - PaymentInitiationTransaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = InitiatePaymentInitiationTransactionResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/PaymentInitiation/Initiate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InitiatePaymentInitiationTransactionResponse> initiate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody InitiatePaymentInitiationTransactionRequest initiatePaymentInitiationTransactionRequest); 


    @ApiOperation(value = "ReCR Retrieve details about a payment transaction", nickname = "retrieve", notes = "ReCR Retrieve details about a payment transaction", response = RetrievePaymentInitiationTransactionResponse.class, tags={ "CR - PaymentInitiationTransaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = RetrievePaymentInitiationTransactionResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/PaymentInitiation/{paymentinitiationId}/Retrieve",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RetrievePaymentInitiationTransactionResponse> retrieve(@ApiParam(value = "",required=true) @PathVariable("paymentinitiationId") String paymentinitiationId); 


    @ApiOperation(value = "ReBQ Retrieve details about a payment transaction compliance check", nickname = "retrieveCompliance", notes = "ReBQ Retrieve details about a payment transaction compliance check", response = RetrieveComplianceResponse.class, tags={ "BQ - Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = RetrieveComplianceResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/PaymentInitiation/{paymentinitiationId}/Compliance/{complianceId}/Retrieve",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RetrieveComplianceResponse> retrieveCompliance(@ApiParam(value = "",required=true) @PathVariable("paymentinitiationId") String paymentinitiationId,@ApiParam(value = "",required=true) @PathVariable("complianceId") String complianceId); 


    @ApiOperation(value = "ReBQ Retrieve details about a payment transaction funds available", nickname = "retrieveFundingCheck", notes = "ReBQ Retrieve details about a payment transaction funds available", response = RetrieveFundingCheckResponse.class, tags={ "BQ - FundingCheck", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = RetrieveFundingCheckResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/PaymentInitiation/{paymentinitiationId}/FundingCheck/{fundingcheckId}/Retrieve",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RetrieveFundingCheckResponse> retrieveFundingCheck(@ApiParam(value = "",required=true) @PathVariable("paymentinitiationId") String paymentinitiationId,@ApiParam(value = "",required=true) @PathVariable("fundingcheckId") String fundingcheckId); 


    @ApiOperation(value = "ReBQ Retrieve details about the payment order initiation", nickname = "retrieveOrderInitiation", notes = "ReBQ Retrieve details about the payment order initiation", response = RetrieveOrderInitiationResponse.class, tags={ "BQ - OrderInitiation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = RetrieveOrderInitiationResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/PaymentInitiation/{paymentinitiationId}/OrderInitiation/{orderinitiationId}/Retrieve",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RetrieveOrderInitiationResponse> retrieveOrderInitiation(@ApiParam(value = "",required=true) @PathVariable("paymentinitiationId") String paymentinitiationId,@ApiParam(value = "",required=true) @PathVariable("orderinitiationId") String orderinitiationId); 


    @ApiOperation(value = "UpCR Update details of a payment transaction instruction", nickname = "update", notes = "UpCR Update details of a payment transaction instruction", response = UpdatePaymentInitiationTransactionResponse.class, tags={ "CR - PaymentInitiationTransaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UpdatePaymentInitiationTransactionResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/PaymentInitiation/{paymentinitiationId}/Update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<UpdatePaymentInitiationTransactionResponse> update(@ApiParam(value = "",required=true) @PathVariable("paymentinitiationId") String paymentinitiationId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdatePaymentInitiationTransactionRequest updatePaymentInitiationTransactionRequest); 

}
